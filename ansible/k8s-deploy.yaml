- name: Set KUBECONFIG and Deploy to EKS
  hosts: local
  tasks:
    - name: Ensure KUBECONFIG is set for session
      set_fact:
        kubeconfig_path: "/home/ubuntu/.kube/config"
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        kubectl get nodes
      register: kubectl_check
      ignore_errors: yes
      changed_when: false  # This won't mark the task as changed, as it's a check

    - name: Debug KUBECONFIG check result
      debug:
        var: kubectl_check.stdout

    - name: Apply Deployment to EKS
      shell: KUBECONFIG={{ kubeconfig_path }} kubectl apply -f ../k8s-configs/deployment.yaml

    - name: Apply Service to EKS
      shell: KUBECONFIG={{ kubeconfig_path }} kubectl apply -f ../k8s-configs/service.yaml


#    - name: Apply node-exporter DaemonSet
#      command: kubectl apply -f ../k8s-configs/node-exporter.yml

#    - name: Apply Prometheus access role
#      command: kubectl apply -f cluster-monitoring-role.yaml
#
#    - name: Generate GKE service account token for Prometheus
#      command: kubectl create token jenkins-gke-access -n default
#      register: gke_token
#
#    - name: Save token to file
#      copy:
#        content: "{{ gke_token.stdout }}"
#        dest: /home/ubuntu/prometheus-token

- name: Setup and Run Prometheus on EC2
  hosts: prometheus
  become: yes
  tasks:
    - name: Update yum packages
      yum:
        name: '*'
        state: latest

    - name: Install Docker
      yum:
        name: docker
        state: present
    - name: Start Docker service
      service:
        name: docker
        state: started

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: true

    - name: Pull Prometheus image
      docker_image:
        name: prom/prometheus
        tag: v2.55.0
        source: pull

    - name: Copy Prometheus config
      copy:
        src: ../k8s-configs/prometheus-config.yml
        dest: /home/ec2-user/prometheus.yml
        mode: '0644'

    - name: Run Prometheus container
      docker_container:
        name: prometheus
        image: prom/prometheus:v2.55.0
        state: started
        restart_policy: always
        published_ports:
          - "9090:9090"
        volumes:
          - /home/ec2-user/prometheus.yml:/etc/prometheus/prometheus.yml
          - /etc/prometheus/secrets:/etc/prometheus/secrets

    - name: Pull Grafana image
      docker_image:
        name: grafana/grafana
        source: pull

    - name: Run Grafana container
      docker_container:
        name: grafana
        image: grafana/grafana
        state: started
        restart_policy: always
        published_ports:
          - "3000:3000"

    - name: Copy Grafana Prometheus datasource config
      copy:
        src: ../k8s-configs/grafana-datasource.yml
        dest: /home/ec2-user/grafana-datasource.yml
        mode: '0644'

    - name: Restart Grafana container
      docker_container:
        name: grafana
        image: grafana/grafana
        state: started
        restart: true
        restart_policy: always
        published_ports:
          - "3000:3000"